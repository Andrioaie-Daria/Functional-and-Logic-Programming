2.
a) Write a function to return the product of two vectors.
https://en.wikipedia.org/wiki/Dot_product
b) Write a function to return the depth of a list. Example: the depth of a linear list is 1.
c) Write a function to sort a linear list without keeping the double values.
d) Write a function to return the intersection of two sets.


a.

[1,2,3,4] x [1,2,3,4] = 1x1 + 2x2+ 3x3 + 4x4 = 30

dot_product(l1...ln, k1...kn)
	= 0, if n=0
	= l1* k1 + dot_product(l2...ln, k2...kn), otherwise


(defun dot_product(l k)
  (cond 
      ((null l) 0)
      (t (+ (* (car l) (car k)) (dot_product (cdr l) (cdr k))))
 )
)


b. 

depth_of_list(l1...ln, d)
	= d, if n = 0
	= depth_of_list(l2...ln, d), if atom(l1)
	= max(depth_of_list(l1, d + 1), depth_of_list(l2...ln), d)


mainDepth(l1...ln) = depth_of_list(l1...ln, 1, 1)



(defun my_max(A B)
  (cond
      ((> A B) A)
      (t B)
   )
)

(defun depth_of_list(l level)
  (cond
      ((null l) level)
      ((atom (car l)) (depth_of_list (cdr l) level))
      (t (my_max (depth_of_list (car l) (+ 1 level)) (depth_of_list (cdr l) level)))
   )
)

(defun mainDepth(l)
  (depth_of_list l 1)
)


c. Sort a linear list without keeping the double values.

insert(l1...ln, e)
	= [e], if n=0
	= e U l1...ln, if e < l1
	= l1 U insert(l2...ln, e), e > l1
	= l1...ln, otherwise (don't insert it if there is already in the list)

sort(l1...ln)
	= [], if n=0
	= insert(sort(l2....ln), l1)



d. return the intersection of 2 sets

contains(l1...ln, e)
	= nil if n = 0
	= true, if l1 =e
	= contains(l2..ln, otherwise)

intersect(l1...ln, k1...kn)
	= [], if n=0 or m = 0
	= l1 U intersect(l2...ln, k1...km), if contains(k1...km, l1)
	= intersect(l2...ln, k1...km), otherwise

(defun contains(l e)
  (cond
       ((null l) nil)
       ((= e (car l)) T)
       (t (contains (cdr l) e))
   )
)

(defun intersect(l k)
  (cond
       ((null l) nil)
       ((null k) nil)
       ((contains k (car l)) (cons (car l) (intersect (cdr l) k)))
       (t (intersect (cdr l) k))
   )
)





