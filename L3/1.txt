1. Write a function to check if an atom is member of a list (the list is non-liniar).

isMember(l, a)
	= true, if l is an atom and l==a
	= false, if l is an atom and l!=a
	= OR isMember(li, a), if l is a list

; some = some returns the first non-nil value which is returned by an invocation of predicate. If the end of a sequence is reached without 
any invocation of the predicate returning true, some returns false. Thus, some returns true if and only if some invocation of 
;        predicate returns true
;      = some o sa parcurga fiecare element din lista si daca gaseste nil se opreste din cautat si il returneaza ca rezultataltfel, o 
;        parcurge pana la capat si o sa returneze true
;  Identity is intended for use with functions that require a function as an argument, could be defined
as: (defun identity (x) x) .


(defun isMember(l e)
  (cond
       ((and (atom l) (equal l e)) t)
       ( (atom l) nil)
       (t (some #'identity (mapcar #'(lambda (a) (isMember a  e) )l )))
   )
)