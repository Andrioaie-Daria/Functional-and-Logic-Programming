9.Write a function that removes all occurrences of an atom from any level of a list, using map functions.

;removeAtom1(l, a)
;	= [], if l is an atom and l==a
;       = [l],  if l is an atom and l!=a	
;	= removeAtom1(l1, a) U ... U removeAtom1(ln, a), i = 1..n, if l is a list 

(defun removeAtom1(l a)
	( cond
		((and (atom l) (= l a)) nil)
                ((atom l) l)
		(t (mapcar #'(lambda (b) (removeAtom1 b a)) l))
	)
)

; because the above function removes atoms by replacing them with NIL, we need an auxiliary function
which removes the NIL atoms from a list

removeNull(l1...ln)
	= [], if n = 0
	= removeNull(l2...ln), if l1 = []
	= {l1} U removeNull(l2...ln), if l1 is an atom
	= removeNull(l1) U removeNull(l2...ln), if l1 is a list

(defun removeNull(l)
	(cond
		((null l) nil)
		((equal (car l) nil) (removeNull (cdr l)))
		((atom (car l)) (cons (car l)(removeNull (cdr l))))
		((listp (car l)) (cons (removeNull (car l)) (removeNull (cdr l))))
	)
)

; now, the initial function is modified such that NILs are removed 
(defun removeAtom2(l a)
	( cond
		((and (atom l) (= l a)) nil)
                ((atom l) l)
		(t ( apply #'removeNull(list( mapcar #'(lambda (b) (removeAtom2 b a)) l))))
	)
)

(removeAtom2 '(1 2 3 (4 5 1 ( 3 1 2))) 1)



; version 3, uses mapcan, without the removeNull function
(defun removeAtom3 (l a)
      (cond 
            	((and (atom l) (= l a)) nil)
                ((atom l)(list l))
                (t (list(mapcan #'(lambda (b) (removeAtom3 b a))l )))
       )
)

(defun main(l a)
  (car (removeAtom3 l a))
)


main '(1 2 3 (4 5 1 ( 3 1 2))) 1