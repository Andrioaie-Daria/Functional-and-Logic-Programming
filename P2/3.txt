3.
a. Merge two sorted lists with removing the double values.
b. For a heterogeneous list, formed from integer numbers and list of numbers, merge all sublists with removing
the double values.
[1, [2, 3], 4, 5, [1, 4, 6], 3, [1, 3, 7, 9, 10], 5, [1, 1, 11], 8] =>
[1, 2, 3, 4, 6, 7, 9, 10, 11].

%nr_occ(L-list, e-elem, R-result)
nr_occ([], _, 0):-!.
nr_occ([H|T], H, R):-
    !,
    nr_occ(T, H, R1),
    R is R1+1.
nr_occ([_|T], E, R):-
    nr_occ(T, E, R).


list_to_set(l1...ln)
	= [], if n=0
	= l1 U list_to_set(l2...ln), if nr_occ(l2...ln, l1) = 0
	= list_to_set(l2...ln), otherwise

%list_to_set(L-list, R-result).
list_to_set([], []).
list_to_set([H|T], [H|R]):-
    nr_occ(T, H, O),
    O=0,
    !,
    list_to_set(T, R).
list_to_set([_|T], R):-
    list_to_set(T, R).


merge_sets(l1...ln, k1...km)
	= k1...km, if n=0
	= l1...ln, if m=0
	= l1 U merge_sorted(l2...ln, k1...km), if l1<k1
	= k1 U merge_sorted(l1...ln, k2...km), otherwise


mainMerge(l1...ln, k1...km)
	= merge_sets(list_to_set(l1...ln), list_to_set(k1...km))

%merge_sets(L, K, R).
merge_sets(L, [], L):-
    !.
merge_sets([], K, K):-
    !.
merge_sets([HL|TL], [HK|TK], [HL|R]):-
    HL<HK,
    !,
    merge_sets(TL, [HK|TK], R).
merge_sets([HL|TL], [HK|TK], [HK|R]):-
    HK<HL,
    !,
    merge_sets([HL|TL], TK, R).

merge_sets([HL|TL], [HK|TK], R):-
    HL = HK,
    merge_sets(TL, [HK|TK], R).


mainMerge(L,K, R):-
    merge_sets(L,K, R).



merge_heter(l1....ln)
	= [], if n=0
	= merge_heter(l2...ln), if atomic(l1)
	= mainMerge(l1, merge_heter(l2...ln)), if l1 is a list


%merge_heter(L-list, R-result)
merge_heter([], []).
merge_heter([H|T], R):-
    atomic(H),
    !,
    merge_heter(T, R).
merge_heter([H|T], R):-
    merge_heter(T, MT),
    mainMerge(H, MT, R).