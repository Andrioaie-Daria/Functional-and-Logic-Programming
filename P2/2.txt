2.
a. Sort a list with keeping double values in resulted list. E.g.: [4 2 6 2 3 4] --> [2 2 3 4 4 6]
b. For a heterogeneous list, formed from integer numbers and list of numbers, write a predicate to sort every
sublist, keeping the doubles.
Eg.: [1, 2, [4, 1, 4], 3, 6, [7, 10, 1, 3, 9], 5, [1, 1, 1], 7] =>
[1, 2, [1, 4, 4], 3, 6, [1, 3, 7, 9, 10], 5, [1, 1, 1], 7].



inserare(l1....ln, e)
	= [e], if n=0
	= e U l1...ln, if e<l1
	= li U inserare(l2...ln, e), otherwise

sort_set(l1...ln, s1...sn)
	= s1...sn, if n = 0
	= sort_set(l2...ln, inserare(s1 ... sn, l1)), otherwise

list_to_set(l1...ln)
	= [], if n=0
	= l1 U list_to_set(l2...ln), if nr_occ(l2...ln, l1) = 0
	= list_to_set(l2...ln), otherwise


mainSort(l1 ... ln) =
	sort_set(list_to_set(l1l2...ln), []).


%nr_occ(L-list, e-elem, R-result)
nr_occ([], _, 0):-!.
nr_occ([H|T], H, R):-
    !,
    nr_occ(T, H, R1),
    R is R1+1.
nr_occ([_|T], E, R):-
    nr_occ(T, E, R).

%inserare(L-list, E-integer, R-result list)
%flow(i,i,o)

inserare([], E, [E]):-!.

inserare(L, E, [E|L]):-
    L=[H|_],
    E < H,
    !.

inserare([H|T], E, [H|R]):-
    inserare(T, E, R).

%sort(L-list, S-sorted_list, R-result list)
%flow(i,i,o)

sort([], S, S).
sort([H|T], S, R):-
    inserare(S, H, INS),
    sort(T, INS, R).
    

%mainSort2(L-list, R-result)
mainSort2(L, R):- 
    sort(L, [], R).

b.

heter_lis2t(l1....ln)
	= [], if n = 0
	= l1 U heter_list2(l2....ln), if atomic(l1)
	= mainSort2(l1) U heter_list2(l2...ln), otherwise


%heter_list(L-list, R-result)
heter_list2([], []).
heter_list2([H|T], [H|R]):-
    atomic(H),
    !,
    heter_list2(T, R).

heter_list2([H|T], [SH|R]):-
    mainSort2(H, SH),
    heter_list2(T, R).
 